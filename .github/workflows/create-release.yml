name: Create Release
on:
  workflow_dispatch:

jobs:
  release:
    name: Deploy and Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Packages
        run: sudo apt-get install -y curl jq grep
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Get current version
        id: getversion
        run: |
          version=$(mvn -f src/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo ::set-output name=version::$version
      - name: Check current version against released tags
        run: |
          releases=$(curl -s $GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases | jq -r '.[].tag_name')
          release_not_exists=$(echo "$releases" | grep -q "${{ steps.getversion.outputs.version }}"; echo $?;)
          if [ "$release_not_exists" -eq "1" ]; then exit 0; else exit 1; fi
      - name: Setup maven settings
        run: |
          cat <<EOT > $HOME/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <servers>
            <server>
              <username>${{ secrets.MAVEN_USER }}</username>
              <password>${{ secrets.MAVEN_PWD }}</password>
              <id>central</id>
            </server>
            <server>
              <username>${{ secrets.MAVEN_USER }}</username>
              <password>${{ secrets.MAVEN_PWD }}</password>
              <id>snapshots</id>
            </server>
           </servers>
          </settings>
          EOT
      - name: Deploy artifacts
        run: mvn -f src/pom.xml clean deploy
      - name: Release distribution
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.getversion.outputs.version }}
          release_name: ${{ steps.getversion.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src/rules-engine/target/rules-engine-${{ steps.getversion.outputs.version }}-dist.zip
          asset_content_type: application/zip
          asset_name: rules-engine-${{ steps.getversion.outputs.version }}-dist.zip
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src/api-engine/target/api-engine-${{ steps.getversion.outputs.version }}-dist.zip
          asset_content_type: application/zip
          asset_name: api-engine-${{ steps.getversion.outputs.version }}-dist.zip
